'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5420
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsreportes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsreportes
    Inherits Global.System.Data.DataSet
    
    Private tabledtlogcambioretiro As dtlogcambioretiroDataTable
    
    Private tabledtlogcambiofp As dtlogcambiofpDataTable
    
    Private tabledtretiros As dtretirosDataTable
    
    Private tabledtcorte As dtcorteDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtlogcambioretiro")) Is Nothing) Then
                MyBase.Tables.Add(New dtlogcambioretiroDataTable(ds.Tables("dtlogcambioretiro")))
            End If
            If (Not (ds.Tables("dtlogcambiofp")) Is Nothing) Then
                MyBase.Tables.Add(New dtlogcambiofpDataTable(ds.Tables("dtlogcambiofp")))
            End If
            If (Not (ds.Tables("dtretiros")) Is Nothing) Then
                MyBase.Tables.Add(New dtretirosDataTable(ds.Tables("dtretiros")))
            End If
            If (Not (ds.Tables("dtcorte")) Is Nothing) Then
                MyBase.Tables.Add(New dtcorteDataTable(ds.Tables("dtcorte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtlogcambioretiro() As dtlogcambioretiroDataTable
        Get
            Return Me.tabledtlogcambioretiro
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtlogcambiofp() As dtlogcambiofpDataTable
        Get
            Return Me.tabledtlogcambiofp
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtretiros() As dtretirosDataTable
        Get
            Return Me.tabledtretiros
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtcorte() As dtcorteDataTable
        Get
            Return Me.tabledtcorte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsreportes = CType(MyBase.Clone,dsreportes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtlogcambioretiro")) Is Nothing) Then
                MyBase.Tables.Add(New dtlogcambioretiroDataTable(ds.Tables("dtlogcambioretiro")))
            End If
            If (Not (ds.Tables("dtlogcambiofp")) Is Nothing) Then
                MyBase.Tables.Add(New dtlogcambiofpDataTable(ds.Tables("dtlogcambiofp")))
            End If
            If (Not (ds.Tables("dtretiros")) Is Nothing) Then
                MyBase.Tables.Add(New dtretirosDataTable(ds.Tables("dtretiros")))
            End If
            If (Not (ds.Tables("dtcorte")) Is Nothing) Then
                MyBase.Tables.Add(New dtcorteDataTable(ds.Tables("dtcorte")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtlogcambioretiro = CType(MyBase.Tables("dtlogcambioretiro"),dtlogcambioretiroDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtlogcambioretiro) Is Nothing) Then
                Me.tabledtlogcambioretiro.InitVars
            End If
        End If
        Me.tabledtlogcambiofp = CType(MyBase.Tables("dtlogcambiofp"),dtlogcambiofpDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtlogcambiofp) Is Nothing) Then
                Me.tabledtlogcambiofp.InitVars
            End If
        End If
        Me.tabledtretiros = CType(MyBase.Tables("dtretiros"),dtretirosDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtretiros) Is Nothing) Then
                Me.tabledtretiros.InitVars
            End If
        End If
        Me.tabledtcorte = CType(MyBase.Tables("dtcorte"),dtcorteDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtcorte) Is Nothing) Then
                Me.tabledtcorte.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsreportes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsreportes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtlogcambioretiro = New dtlogcambioretiroDataTable
        MyBase.Tables.Add(Me.tabledtlogcambioretiro)
        Me.tabledtlogcambiofp = New dtlogcambiofpDataTable
        MyBase.Tables.Add(Me.tabledtlogcambiofp)
        Me.tabledtretiros = New dtretirosDataTable
        MyBase.Tables.Add(Me.tabledtretiros)
        Me.tabledtcorte = New dtcorteDataTable
        MyBase.Tables.Add(Me.tabledtcorte)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtlogcambioretiro() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtlogcambiofp() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtretiros() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtcorte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsreportes = New dsreportes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtlogcambioretiroRowChangeEventHandler(ByVal sender As Object, ByVal e As dtlogcambioretiroRowChangeEvent)
    
    Public Delegate Sub dtlogcambiofpRowChangeEventHandler(ByVal sender As Object, ByVal e As dtlogcambiofpRowChangeEvent)
    
    Public Delegate Sub dtretirosRowChangeEventHandler(ByVal sender As Object, ByVal e As dtretirosRowChangeEvent)
    
    Public Delegate Sub dtcorteRowChangeEventHandler(ByVal sender As Object, ByVal e As dtcorteRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtlogcambioretiroDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnidusuarios As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columncodigopago As Global.System.Data.DataColumn
        
        Private columnmontoanterior As Global.System.Data.DataColumn
        
        Private columnmontonuevo As Global.System.Data.DataColumn
        
        Private columnobservaciones As Global.System.Data.DataColumn
        
        Private columnusuario As Global.System.Data.DataColumn
        
        Private columnfechahoramodificado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtlogcambioretiro"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idusuariosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidusuarios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigopagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigopago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoanteriorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoanterior
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montonuevoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontonuevo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property observacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahoramodificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechahoramodificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtlogcambioretiroRow
            Get
                Return CType(Me.Rows(index),dtlogcambioretiroRow)
            End Get
        End Property
        
        Public Event dtlogcambioretiroRowChanging As dtlogcambioretiroRowChangeEventHandler
        
        Public Event dtlogcambioretiroRowChanged As dtlogcambioretiroRowChangeEventHandler
        
        Public Event dtlogcambioretiroRowDeleting As dtlogcambioretiroRowChangeEventHandler
        
        Public Event dtlogcambioretiroRowDeleted As dtlogcambioretiroRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtlogcambioretiroRow(ByVal row As dtlogcambioretiroRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtlogcambioretiroRow(ByVal idusuarios As Short, ByVal nombre As String, ByVal codigopago As String, ByVal montoanterior As Decimal, ByVal montonuevo As Decimal, ByVal observaciones As String, ByVal usuario As String, ByVal fechahoramodificado As Date) As dtlogcambioretiroRow
            Dim rowdtlogcambioretiroRow As dtlogcambioretiroRow = CType(Me.NewRow,dtlogcambioretiroRow)
            Dim columnValuesArray() As Object = New Object() {idusuarios, nombre, codigopago, montoanterior, montonuevo, observaciones, usuario, fechahoramodificado}
            rowdtlogcambioretiroRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtlogcambioretiroRow)
            Return rowdtlogcambioretiroRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtlogcambioretiroDataTable = CType(MyBase.Clone,dtlogcambioretiroDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtlogcambioretiroDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidusuarios = MyBase.Columns("idusuarios")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columncodigopago = MyBase.Columns("codigopago")
            Me.columnmontoanterior = MyBase.Columns("montoanterior")
            Me.columnmontonuevo = MyBase.Columns("montonuevo")
            Me.columnobservaciones = MyBase.Columns("observaciones")
            Me.columnusuario = MyBase.Columns("usuario")
            Me.columnfechahoramodificado = MyBase.Columns("fechahoramodificado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidusuarios = New Global.System.Data.DataColumn("idusuarios", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidusuarios)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columncodigopago = New Global.System.Data.DataColumn("codigopago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigopago)
            Me.columnmontoanterior = New Global.System.Data.DataColumn("montoanterior", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoanterior)
            Me.columnmontonuevo = New Global.System.Data.DataColumn("montonuevo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontonuevo)
            Me.columnobservaciones = New Global.System.Data.DataColumn("observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobservaciones)
            Me.columnusuario = New Global.System.Data.DataColumn("usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusuario)
            Me.columnfechahoramodificado = New Global.System.Data.DataColumn("fechahoramodificado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahoramodificado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtlogcambioretiroRow() As dtlogcambioretiroRow
            Return CType(Me.NewRow,dtlogcambioretiroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtlogcambioretiroRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtlogcambioretiroRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtlogcambioretiroRowChangedEvent) Is Nothing) Then
                RaiseEvent dtlogcambioretiroRowChanged(Me, New dtlogcambioretiroRowChangeEvent(CType(e.Row,dtlogcambioretiroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtlogcambioretiroRowChangingEvent) Is Nothing) Then
                RaiseEvent dtlogcambioretiroRowChanging(Me, New dtlogcambioretiroRowChangeEvent(CType(e.Row,dtlogcambioretiroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtlogcambioretiroRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtlogcambioretiroRowDeleted(Me, New dtlogcambioretiroRowChangeEvent(CType(e.Row,dtlogcambioretiroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtlogcambioretiroRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtlogcambioretiroRowDeleting(Me, New dtlogcambioretiroRowChangeEvent(CType(e.Row,dtlogcambioretiroRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtlogcambioretiroRow(ByVal row As dtlogcambioretiroRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsreportes = New dsreportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtlogcambioretiroDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtlogcambiofpDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnidusuarios As Global.System.Data.DataColumn
        
        Private columnnombre As Global.System.Data.DataColumn
        
        Private columnidcajas As Global.System.Data.DataColumn
        
        Private columnnodocumento As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columncodigopagoorigen As Global.System.Data.DataColumn
        
        Private columnmontoanteriororigen As Global.System.Data.DataColumn
        
        Private columnmontonuevoorigen As Global.System.Data.DataColumn
        
        Private columncodigopagodestino As Global.System.Data.DataColumn
        
        Private columnmontoanteriordestino As Global.System.Data.DataColumn
        
        Private columnmontonuevodestino As Global.System.Data.DataColumn
        
        Private columnobservaciones As Global.System.Data.DataColumn
        
        Private columnusuario As Global.System.Data.DataColumn
        
        Private columnfechahoramodificado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtlogcambiofp"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idusuariosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidusuarios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idcajasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidcajas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nodocumentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnodocumento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigopagoorigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigopagoorigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoanteriororigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoanteriororigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montonuevoorigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontonuevoorigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigopagodestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigopagodestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoanteriordestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontoanteriordestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montonuevodestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmontonuevodestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property observacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property usuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahoramodificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechahoramodificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtlogcambiofpRow
            Get
                Return CType(Me.Rows(index),dtlogcambiofpRow)
            End Get
        End Property
        
        Public Event dtlogcambiofpRowChanging As dtlogcambiofpRowChangeEventHandler
        
        Public Event dtlogcambiofpRowChanged As dtlogcambiofpRowChangeEventHandler
        
        Public Event dtlogcambiofpRowDeleting As dtlogcambiofpRowChangeEventHandler
        
        Public Event dtlogcambiofpRowDeleted As dtlogcambiofpRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtlogcambiofpRow(ByVal row As dtlogcambiofpRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtlogcambiofpRow(ByVal idusuarios As Short, ByVal nombre As String, ByVal idcajas As Short, ByVal nodocumento As String, ByVal monto As Decimal, ByVal codigopagoorigen As String, ByVal montoanteriororigen As String, ByVal montonuevoorigen As Decimal, ByVal codigopagodestino As String, ByVal montoanteriordestino As String, ByVal montonuevodestino As Decimal, ByVal observaciones As String, ByVal usuario As String, ByVal fechahoramodificado As Date) As dtlogcambiofpRow
            Dim rowdtlogcambiofpRow As dtlogcambiofpRow = CType(Me.NewRow,dtlogcambiofpRow)
            Dim columnValuesArray() As Object = New Object() {idusuarios, nombre, idcajas, nodocumento, monto, codigopagoorigen, montoanteriororigen, montonuevoorigen, codigopagodestino, montoanteriordestino, montonuevodestino, observaciones, usuario, fechahoramodificado}
            rowdtlogcambiofpRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtlogcambiofpRow)
            Return rowdtlogcambiofpRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtlogcambiofpDataTable = CType(MyBase.Clone,dtlogcambiofpDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtlogcambiofpDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidusuarios = MyBase.Columns("idusuarios")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnidcajas = MyBase.Columns("idcajas")
            Me.columnnodocumento = MyBase.Columns("nodocumento")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columncodigopagoorigen = MyBase.Columns("codigopagoorigen")
            Me.columnmontoanteriororigen = MyBase.Columns("montoanteriororigen")
            Me.columnmontonuevoorigen = MyBase.Columns("montonuevoorigen")
            Me.columncodigopagodestino = MyBase.Columns("codigopagodestino")
            Me.columnmontoanteriordestino = MyBase.Columns("montoanteriordestino")
            Me.columnmontonuevodestino = MyBase.Columns("montonuevodestino")
            Me.columnobservaciones = MyBase.Columns("observaciones")
            Me.columnusuario = MyBase.Columns("usuario")
            Me.columnfechahoramodificado = MyBase.Columns("fechahoramodificado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidusuarios = New Global.System.Data.DataColumn("idusuarios", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidusuarios)
            Me.columnnombre = New Global.System.Data.DataColumn("nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnidcajas = New Global.System.Data.DataColumn("idcajas", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidcajas)
            Me.columnnodocumento = New Global.System.Data.DataColumn("nodocumento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnodocumento)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columncodigopagoorigen = New Global.System.Data.DataColumn("codigopagoorigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigopagoorigen)
            Me.columnmontoanteriororigen = New Global.System.Data.DataColumn("montoanteriororigen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoanteriororigen)
            Me.columnmontonuevoorigen = New Global.System.Data.DataColumn("montonuevoorigen", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontonuevoorigen)
            Me.columncodigopagodestino = New Global.System.Data.DataColumn("codigopagodestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigopagodestino)
            Me.columnmontoanteriordestino = New Global.System.Data.DataColumn("montoanteriordestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontoanteriordestino)
            Me.columnmontonuevodestino = New Global.System.Data.DataColumn("montonuevodestino", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmontonuevodestino)
            Me.columnobservaciones = New Global.System.Data.DataColumn("observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobservaciones)
            Me.columnusuario = New Global.System.Data.DataColumn("usuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusuario)
            Me.columnfechahoramodificado = New Global.System.Data.DataColumn("fechahoramodificado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahoramodificado)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtlogcambiofpRow() As dtlogcambiofpRow
            Return CType(Me.NewRow,dtlogcambiofpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtlogcambiofpRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtlogcambiofpRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtlogcambiofpRowChangedEvent) Is Nothing) Then
                RaiseEvent dtlogcambiofpRowChanged(Me, New dtlogcambiofpRowChangeEvent(CType(e.Row,dtlogcambiofpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtlogcambiofpRowChangingEvent) Is Nothing) Then
                RaiseEvent dtlogcambiofpRowChanging(Me, New dtlogcambiofpRowChangeEvent(CType(e.Row,dtlogcambiofpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtlogcambiofpRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtlogcambiofpRowDeleted(Me, New dtlogcambiofpRowChangeEvent(CType(e.Row,dtlogcambiofpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtlogcambiofpRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtlogcambiofpRowDeleting(Me, New dtlogcambiofpRowChangeEvent(CType(e.Row,dtlogcambiofpRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtlogcambiofpRow(ByVal row As dtlogcambiofpRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsreportes = New dsreportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtlogcambiofpDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtretirosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncodigopago As Global.System.Data.DataColumn
        
        Private columnnombrepago As Global.System.Data.DataColumn
        
        Private columnmonto As Global.System.Data.DataColumn
        
        Private columnfechahora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtretiros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigopagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigopago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombrepagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombrepago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property montoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechahoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechahora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtretirosRow
            Get
                Return CType(Me.Rows(index),dtretirosRow)
            End Get
        End Property
        
        Public Event dtretirosRowChanging As dtretirosRowChangeEventHandler
        
        Public Event dtretirosRowChanged As dtretirosRowChangeEventHandler
        
        Public Event dtretirosRowDeleting As dtretirosRowChangeEventHandler
        
        Public Event dtretirosRowDeleted As dtretirosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtretirosRow(ByVal row As dtretirosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtretirosRow(ByVal codigopago As String, ByVal nombrepago As String, ByVal monto As Decimal, ByVal fechahora As Date) As dtretirosRow
            Dim rowdtretirosRow As dtretirosRow = CType(Me.NewRow,dtretirosRow)
            Dim columnValuesArray() As Object = New Object() {codigopago, nombrepago, monto, fechahora}
            rowdtretirosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtretirosRow)
            Return rowdtretirosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtretirosDataTable = CType(MyBase.Clone,dtretirosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtretirosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigopago = MyBase.Columns("codigopago")
            Me.columnnombrepago = MyBase.Columns("nombrepago")
            Me.columnmonto = MyBase.Columns("monto")
            Me.columnfechahora = MyBase.Columns("fechahora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigopago = New Global.System.Data.DataColumn("codigopago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigopago)
            Me.columnnombrepago = New Global.System.Data.DataColumn("nombrepago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombrepago)
            Me.columnmonto = New Global.System.Data.DataColumn("monto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmonto)
            Me.columnfechahora = New Global.System.Data.DataColumn("fechahora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechahora)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtretirosRow() As dtretirosRow
            Return CType(Me.NewRow,dtretirosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtretirosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtretirosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtretirosRowChangedEvent) Is Nothing) Then
                RaiseEvent dtretirosRowChanged(Me, New dtretirosRowChangeEvent(CType(e.Row,dtretirosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtretirosRowChangingEvent) Is Nothing) Then
                RaiseEvent dtretirosRowChanging(Me, New dtretirosRowChangeEvent(CType(e.Row,dtretirosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtretirosRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtretirosRowDeleted(Me, New dtretirosRowChangeEvent(CType(e.Row,dtretirosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtretirosRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtretirosRowDeleting(Me, New dtretirosRowChangeEvent(CType(e.Row,dtretirosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtretirosRow(ByVal row As dtretirosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsreportes = New dsreportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtretirosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtcorteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnidusuarios As Global.System.Data.DataColumn
        
        Private columncodigopago As Global.System.Data.DataColumn
        
        Private columnnombrepago As Global.System.Data.DataColumn
        
        Private columnventa As Global.System.Data.DataColumn
        
        Private columndepositos As Global.System.Data.DataColumn
        
        Private columnretiros As Global.System.Data.DataColumn
        
        Private columndiferencia As Global.System.Data.DataColumn
        
        Private columnpromocanje As Global.System.Data.DataColumn
        
        Private columnpromogeneracion As Global.System.Data.DataColumn
        
        Private columnpromocanjemonto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtcorte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idusuariosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidusuarios
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigopagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodigopago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombrepagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnombrepago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ventaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnventa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property depositosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepositos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property retirosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnretiros
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property promocanjeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpromocanje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property promogeneracionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpromogeneracion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property promocanjemontoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpromocanjemonto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtcorteRow
            Get
                Return CType(Me.Rows(index),dtcorteRow)
            End Get
        End Property
        
        Public Event dtcorteRowChanging As dtcorteRowChangeEventHandler
        
        Public Event dtcorteRowChanged As dtcorteRowChangeEventHandler
        
        Public Event dtcorteRowDeleting As dtcorteRowChangeEventHandler
        
        Public Event dtcorteRowDeleted As dtcorteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtcorteRow(ByVal row As dtcorteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtcorteRow(ByVal idusuarios As Short, ByVal codigopago As String, ByVal nombrepago As String, ByVal venta As Decimal, ByVal depositos As Decimal, ByVal retiros As Decimal, ByVal diferencia As Decimal, ByVal promocanje As Decimal, ByVal promogeneracion As Decimal, ByVal promocanjemonto As Decimal) As dtcorteRow
            Dim rowdtcorteRow As dtcorteRow = CType(Me.NewRow,dtcorteRow)
            Dim columnValuesArray() As Object = New Object() {idusuarios, codigopago, nombrepago, venta, depositos, retiros, diferencia, promocanje, promogeneracion, promocanjemonto}
            rowdtcorteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtcorteRow)
            Return rowdtcorteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtcorteDataTable = CType(MyBase.Clone,dtcorteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtcorteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnidusuarios = MyBase.Columns("idusuarios")
            Me.columncodigopago = MyBase.Columns("codigopago")
            Me.columnnombrepago = MyBase.Columns("nombrepago")
            Me.columnventa = MyBase.Columns("venta")
            Me.columndepositos = MyBase.Columns("depositos")
            Me.columnretiros = MyBase.Columns("retiros")
            Me.columndiferencia = MyBase.Columns("diferencia")
            Me.columnpromocanje = MyBase.Columns("promocanje")
            Me.columnpromogeneracion = MyBase.Columns("promogeneracion")
            Me.columnpromocanjemonto = MyBase.Columns("promocanjemonto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnidusuarios = New Global.System.Data.DataColumn("idusuarios", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidusuarios)
            Me.columncodigopago = New Global.System.Data.DataColumn("codigopago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigopago)
            Me.columnnombrepago = New Global.System.Data.DataColumn("nombrepago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombrepago)
            Me.columnventa = New Global.System.Data.DataColumn("venta", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnventa)
            Me.columndepositos = New Global.System.Data.DataColumn("depositos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepositos)
            Me.columnretiros = New Global.System.Data.DataColumn("retiros", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnretiros)
            Me.columndiferencia = New Global.System.Data.DataColumn("diferencia", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiferencia)
            Me.columnpromocanje = New Global.System.Data.DataColumn("promocanje", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpromocanje)
            Me.columnpromogeneracion = New Global.System.Data.DataColumn("promogeneracion", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpromogeneracion)
            Me.columnpromocanjemonto = New Global.System.Data.DataColumn("promocanjemonto", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpromocanjemonto)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtcorteRow() As dtcorteRow
            Return CType(Me.NewRow,dtcorteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtcorteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtcorteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtcorteRowChangedEvent) Is Nothing) Then
                RaiseEvent dtcorteRowChanged(Me, New dtcorteRowChangeEvent(CType(e.Row,dtcorteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtcorteRowChangingEvent) Is Nothing) Then
                RaiseEvent dtcorteRowChanging(Me, New dtcorteRowChangeEvent(CType(e.Row,dtcorteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtcorteRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtcorteRowDeleted(Me, New dtcorteRowChangeEvent(CType(e.Row,dtcorteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtcorteRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtcorteRowDeleting(Me, New dtcorteRowChangeEvent(CType(e.Row,dtcorteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtcorteRow(ByVal row As dtcorteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsreportes = New dsreportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtcorteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtlogcambioretiroRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtlogcambioretiro As dtlogcambioretiroDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtlogcambioretiro = CType(Me.Table,dtlogcambioretiroDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idusuarios() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.idusuariosColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idusuarios' de la tabla 'dtlogcambioretiro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.idusuariosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'dtlogcambioretiro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigopago() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.codigopagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigopago' de la tabla 'dtlogcambioretiro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.codigopagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoanterior() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.montoanteriorColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoanterior' de la tabla 'dtlogcambioretiro' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.montoanteriorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montonuevo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.montonuevoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montonuevo' de la tabla 'dtlogcambioretiro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.montonuevoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.observacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'observaciones' de la tabla 'dtlogcambioretiro' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.observacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.usuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'usuario' de la tabla 'dtlogcambioretiro' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.usuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahoramodificado() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambioretiro.fechahoramodificadoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechahoramodificado' de la tabla 'dtlogcambioretiro' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambioretiro.fechahoramodificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidusuariosNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.idusuariosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidusuariosNull()
            Me(Me.tabledtlogcambioretiro.idusuariosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tabledtlogcambioretiro.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigopagoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.codigopagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigopagoNull()
            Me(Me.tabledtlogcambioretiro.codigopagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoanteriorNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.montoanteriorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoanteriorNull()
            Me(Me.tabledtlogcambioretiro.montoanteriorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontonuevoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.montonuevoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontonuevoNull()
            Me(Me.tabledtlogcambioretiro.montonuevoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.observacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobservacionesNull()
            Me(Me.tabledtlogcambioretiro.observacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusuarioNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.usuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusuarioNull()
            Me(Me.tabledtlogcambioretiro.usuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahoramodificadoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambioretiro.fechahoramodificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahoramodificadoNull()
            Me(Me.tabledtlogcambioretiro.fechahoramodificadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtlogcambiofpRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtlogcambiofp As dtlogcambiofpDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtlogcambiofp = CType(Me.Table,dtlogcambiofpDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idusuarios() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.idusuariosColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idusuarios' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.idusuariosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.nombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombre' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.nombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idcajas() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.idcajasColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idcajas' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.idcajasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nodocumento() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.nodocumentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nodocumento' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.nodocumentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'monto' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigopagoorigen() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.codigopagoorigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigopagoorigen' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.codigopagoorigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoanteriororigen() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.montoanteriororigenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoanteriororigen' de la tabla 'dtlogcambiofp' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.montoanteriororigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montonuevoorigen() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.montonuevoorigenColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montonuevoorigen' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.montonuevoorigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigopagodestino() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.codigopagodestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigopagodestino' de la tabla 'dtlogcambiofp' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.codigopagodestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montoanteriordestino() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.montoanteriordestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montoanteriordestino' de la tabla 'dtlogcambiofp' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.montoanteriordestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property montonuevodestino() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.montonuevodestinoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'montonuevodestino' de la tabla 'dtlogcambiofp' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.montonuevodestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.observacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'observaciones' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.observacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property usuario() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.usuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'usuario' de la tabla 'dtlogcambiofp' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.usuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahoramodificado() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtlogcambiofp.fechahoramodificadoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechahoramodificado' de la tabla 'dtlogcambiofp' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtlogcambiofp.fechahoramodificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidusuariosNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.idusuariosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidusuariosNull()
            Me(Me.tabledtlogcambiofp.idusuariosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombreNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.nombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombreNull()
            Me(Me.tabledtlogcambiofp.nombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidcajasNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.idcajasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidcajasNull()
            Me(Me.tabledtlogcambiofp.idcajasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnodocumentoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.nodocumentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnodocumentoNull()
            Me(Me.tabledtlogcambiofp.nodocumentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tabledtlogcambiofp.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigopagoorigenNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.codigopagoorigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigopagoorigenNull()
            Me(Me.tabledtlogcambiofp.codigopagoorigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoanteriororigenNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.montoanteriororigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoanteriororigenNull()
            Me(Me.tabledtlogcambiofp.montoanteriororigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontonuevoorigenNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.montonuevoorigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontonuevoorigenNull()
            Me(Me.tabledtlogcambiofp.montonuevoorigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigopagodestinoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.codigopagodestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigopagodestinoNull()
            Me(Me.tabledtlogcambiofp.codigopagodestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoanteriordestinoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.montoanteriordestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoanteriordestinoNull()
            Me(Me.tabledtlogcambiofp.montoanteriordestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontonuevodestinoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.montonuevodestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontonuevodestinoNull()
            Me(Me.tabledtlogcambiofp.montonuevodestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobservacionesNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.observacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobservacionesNull()
            Me(Me.tabledtlogcambiofp.observacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsusuarioNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.usuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetusuarioNull()
            Me(Me.tabledtlogcambiofp.usuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahoramodificadoNull() As Boolean
            Return Me.IsNull(Me.tabledtlogcambiofp.fechahoramodificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahoramodificadoNull()
            Me(Me.tabledtlogcambiofp.fechahoramodificadoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtretirosRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtretiros As dtretirosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtretiros = CType(Me.Table,dtretirosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigopago() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtretiros.codigopagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigopago' de la tabla 'dtretiros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtretiros.codigopagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombrepago() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtretiros.nombrepagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombrepago' de la tabla 'dtretiros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtretiros.nombrepagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property monto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtretiros.montoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'monto' de la tabla 'dtretiros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtretiros.montoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechahora() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtretiros.fechahoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechahora' de la tabla 'dtretiros' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtretiros.fechahoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigopagoNull() As Boolean
            Return Me.IsNull(Me.tabledtretiros.codigopagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigopagoNull()
            Me(Me.tabledtretiros.codigopagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombrepagoNull() As Boolean
            Return Me.IsNull(Me.tabledtretiros.nombrepagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombrepagoNull()
            Me(Me.tabledtretiros.nombrepagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmontoNull() As Boolean
            Return Me.IsNull(Me.tabledtretiros.montoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmontoNull()
            Me(Me.tabledtretiros.montoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechahoraNull() As Boolean
            Return Me.IsNull(Me.tabledtretiros.fechahoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechahoraNull()
            Me(Me.tabledtretiros.fechahoraColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtcorteRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtcorte As dtcorteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtcorte = CType(Me.Table,dtcorteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property idusuarios() As Short
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.idusuariosColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'idusuarios' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.idusuariosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigopago() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.codigopagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'codigopago' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.codigopagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombrepago() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.nombrepagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'nombrepago' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.nombrepagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property venta() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.ventaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'venta' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.ventaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property depositos() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.depositosColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'depositos' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.depositosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property retiros() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.retirosColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'retiros' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.retirosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diferencia() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.diferenciaColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'diferencia' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.diferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property promocanje() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.promocanjeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'promocanje' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.promocanjeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property promogeneracion() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.promogeneracionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'promogeneracion' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.promogeneracionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property promocanjemonto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtcorte.promocanjemontoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'promocanjemonto' de la tabla 'dtcorte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtcorte.promocanjemontoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsidusuariosNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.idusuariosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetidusuariosNull()
            Me(Me.tabledtcorte.idusuariosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscodigopagoNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.codigopagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcodigopagoNull()
            Me(Me.tabledtcorte.codigopagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnombrepagoNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.nombrepagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnombrepagoNull()
            Me(Me.tabledtcorte.nombrepagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsventaNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.ventaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetventaNull()
            Me(Me.tabledtcorte.ventaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdepositosNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.depositosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdepositosNull()
            Me(Me.tabledtcorte.depositosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsretirosNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.retirosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetretirosNull()
            Me(Me.tabledtcorte.retirosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdiferenciaNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.diferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdiferenciaNull()
            Me(Me.tabledtcorte.diferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspromocanjeNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.promocanjeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpromocanjeNull()
            Me(Me.tabledtcorte.promocanjeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspromogeneracionNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.promogeneracionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpromogeneracionNull()
            Me(Me.tabledtcorte.promogeneracionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspromocanjemontoNull() As Boolean
            Return Me.IsNull(Me.tabledtcorte.promocanjemontoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpromocanjemontoNull()
            Me(Me.tabledtcorte.promocanjemontoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtlogcambioretiroRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtlogcambioretiroRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtlogcambioretiroRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtlogcambioretiroRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtlogcambiofpRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtlogcambiofpRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtlogcambiofpRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtlogcambiofpRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtretirosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtretirosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtretirosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtretirosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtcorteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtcorteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtcorteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtcorteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
